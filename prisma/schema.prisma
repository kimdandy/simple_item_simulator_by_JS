// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
model Items {
  item_code Int  @id @default(autoincrement()) 
  item_name String @unique
  item_stat Int
  item_price Int 

  @@map("Items")
}

model Accounts {
  userId  String @id @unique @map("Id")
  password  String @map("password")
  name String @map("name")

  characters Characters[]

  @@map("Accounts")
}

model Characters {
  userId String @unique @map("userId")
  character_name String @unique @map("character_name")
  health Int @map("health")
  power Int @map("power")
  money Int @default(10000) @map("money")

  accounts Accounts @relation(fields: [userId], references: [userId], onDelete: Cascade)
  equipment Equipment[]
  inventory Inventory[]

  @@map("Characters")
}

model Equipment {
  item_code Int  @id @default(autoincrement()) @map("item_code")
  item_name String @unique @map("item_name")
  item_stat Int @map("item_stat")
  character_name String @unique @map("character_name")

  characters Characters @relation(fields: [character_name], references:[character_name], onDelete:Cascade)

  @@map("Equipment")
}

model Inventory {
  item_code Int  @id @default(autoincrement()) @map("item_code")
  item_name String @unique @map("item_name")
  item_stat Int @map("item_stat")
  item_count Int @map("item_count")
  character_name String @unique @map("character_name")

  characters Characters @relation(fields: [character_name], references:[character_name], onDelete:Cascade)

  @@map("Inventory")
}



